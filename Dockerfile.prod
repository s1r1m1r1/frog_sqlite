# Specify the Dart SDK base image version using dart:<version> (ex: dart:2.12)
FROM dart:stable AS build

# Resolve app dependencies
WORKDIR /app
COPY pubspec.* ./
# Use ./ for consistency with WORKDIR
RUN dart pub get

# Copy app source code and AOT compile it
COPY . .

# Generate a production build for Dart Frog
RUN dart pub global activate dart_frog_cli
RUN dart pub global run dart_frog_cli:dart_frog build

# Ensure packages are still up-to-date if anything has changed (for the build output)
RUN dart pub get --offline

# AOT compile the Dart Frog server executable
# The output path should match where dart_frog build places the server entry point
RUN dart compile exe build/bin/server.dart -o build/bin/server

# Stage to get the libsqlite3.so.0 library
FROM debian:bullseye-slim AS sqlite_source

# Install libsqlite3-0 which contains the libsqlite3.so.0 shared library
# --no-install-recommends helps keep the image small
RUN apt-get update -qq && \
    apt-get install --no-install-recommends -y libsqlite3-0 && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* # Clean up apt cache

# --- FINAL RUNTIME IMAGE ---
FROM debian:bullseye-slim

# Copy Dart runtime and your compiled application from the build stage
COPY --from=build /runtime/ /
COPY --from=build /app/build/bin/server /app/bin/server

# Copy the specific libsqlite3.so.0 from the 'sqlite_source' stage
# The path is now set for x86_64 (amd64) Debian systems.
COPY --from=sqlite_source /usr/lib/x86_64-linux-gnu/libsqlite3.so.0 /usr/lib/libsqlite3.so.0

# Create the generic symlink for libsqlite3.so
RUN ln -s /usr/lib/libsqlite3.so.0 /usr/lib/libsqlite3.so

# --- CLOUD.RU SPECIFIC USER AND PERMISSIONS ---
# Создаем группу и пользователя с UID/GID 1000, как требуют инструкции Cloud.ru
# '-M' означает, что домашняя директория не создается
# '-s /bin/sh' устанавливает оболочку по умолчанию
RUN groupadd -g 1000 appuser \
    && useradd -u 1000 -g 1000 -s /bin/sh -M appuser

# Создаем директорию /data (если ее нет) и назначаем ей права
# Ошибка указала на /data, поэтому даем права именно ей.
# Также убедимся, что /app (где находится код приложения) принадлежит этому пользователю.
RUN mkdir -p /data \
    && chown -R 1000:1000 /data \
    && chmod -R 775 /data \
    && chown -R 1000:1000 /app 
    # Убедимся, что /app также принадлежит пользователю 1000

# Переключаемся на непривилегированного пользователя
USER appuser

# Start server.
EXPOSE 8080
ENTRYPOINT ["/app/bin/server"]